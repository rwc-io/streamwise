name: Deploy to Firebase on merge
on:
  push:
    branches:
      - main
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: './.nvmrc'
      - name: Generate .firebaserc
        run: |
          ./write-firebase-config.sh
          cat .firebaserc
        env:
          FIREBASE_PROJECT_ID: ${{ vars.FIREBASE_PROJECT_ID }}
          FIREBASE_APP_ID: ${{ vars.FIREBASE_APP_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ vars.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_API_KEY: ${{ vars.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ vars.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ vars.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_USE_EMULATORS: false
      - name: Install Firebase CLI
        run: |
          npm install -g firebase-tools
          firebase --version
      - name: Build Angular app
        run: |
          ./gradlew webApp:buildProductionWebApp
      - name: Deploy hosting
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" | base64 --decode > "google-application-credentials.json"
          firebase deploy --only hosting --non-interactive
          rm -rf "google-application-credentials.json"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "google-application-credentials.json"
      - name: Deploy Firestore rules
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" | base64 --decode > "google-application-credentials.json"
          firebase deploy --only firestore:rules --non-interactive
          rm -rf "google-application-credentials.json"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "google-application-credentials.json"
      - name: Cleanup credentials
        if: always()
        run: |
          rm -rf "google-application-credentials.json"
